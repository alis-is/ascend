name: release

on:
  push:
    branches:
      - main
    
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      NEEDS_RELEASE: ${{ steps.prep.outputs.NEEDS_RELEASE }}
      VERSION: ${{ steps.prep.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: setup eli
        uses: alis-is/setup-eli@v1

      - name: test ascend
        working-directory: tests
        run: |
          eli ./all.lua

      - name: prep
        id: prep
        run: |
          VERSION=$(eli -e "info = require'src.version-info'; io.write(info.VERSION)")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          if git tag -l "$VERSION" | grep "$VERSION"; then 
            echo "Version $VERSION already exists";
          else
            echo "Found new version - $VERSION"
            echo "NEEDS_RELEASE=true" >> $GITHUB_OUTPUT
          fi

      - name: build ascend and asctl
        if: ${{ steps.prep.outputs.NEEDS_RELEASE == 'true'}}
        run: |
          export ELI_PATH=$PWD/eli
          eli ./build/build.lua
          # cd .meta && zip ../meta.zip -r * && cd ..

      - name: hash
        if: ${{ steps.prep.outputs.NEEDS_RELEASE == 'true'}}
        id: hash
        run: |
          echo "AMI_ASCTL_SHA256=$(sha256sum bin/asctl-${{ steps.prep.outputs.VERSION }}.zip | awk '{ print $1 }')" >> $GITHUB_OUTPUT

      - name: publish
        uses: ncipollo/release-action@v1
        if: ${{ steps.prep.outputs.NEEDS_RELEASE == 'true'}}
        with:
          artifacts: "bin/ascend,bin/asctl,bin/asctl-${{ steps.prep.outputs.VERSION }}.zip"
          tag: ${{ steps.prep.outputs.VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Air Repository Dispatch
        uses: peter-evans/repository-dispatch@v2
        if: ${{ steps.prep.outputs.NEEDS_RELEASE == 'true'}}
        with:
          token: ${{ secrets.AIR_AT }}
          repository: alis-is/air
          event-type: app-release
          client-payload: '{ "id": "plugin:asctl", "version": "${{ steps.prep.outputs.VERSION }}", "package": "https://github.com/alis-is/ascend/releases/download/${{ steps.prep.outputs.VERSION }}/asctl-${{ steps.prep.outputs.VERSION }}.zip", "sha256": "${{ steps.hash.outputs.AMI_ASCTL_SHA256 }}" }'

  build-containers:
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - uses: actions/checkout@v3
      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and publish alpine container
        uses: docker/build-push-action@v4
        if: ${{ needs.build.outputs.NEEDS_RELEASE == 'true' }}
        with:
          file: ./containers/alpine/Containerfile
          context: ./containers/alpine
          platforms: linux/amd64,linux/arm64
          build-args: GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          tags: ghcr.io/alis-is/ascend:latest,ghcr.io/alis-is/ascend:latest-alpine,ghcr.io/alis-is/ascend:${{ needs.build.outputs.VERSION }}-alpine
          push: true
          provenance: false
      - name: Build and publish alpine-ami container
        uses: docker/build-push-action@v4
        if: ${{ needs.build.outputs.NEEDS_RELEASE == 'true' }}
        with:
          file: ./containers/alpine-ami/Containerfile
          context: ./containers/alpine-ami
          platforms: linux/amd64,linux/arm64
          build-args: GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          tags: ghcr.io/alis-is/ascend:latest-alpine-ami,ghcr.io/alis-is/ascend:${{ needs.build.outputs.VERSION }}-alpine-ami
          push: true
          provenance: false
      - name: Build and publish ubuntu container
        uses: docker/build-push-action@v4
        if: ${{ needs.build.outputs.NEEDS_RELEASE == 'true' }}
        with:
          file: ./containers/ubuntu/Containerfile
          context: ./containers/ubuntu
          platforms: linux/amd64,linux/arm64
          build-args: GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          tags: ghcr.io/alis-is/ascend:latest-ubuntu,ghcr.io/alis-is/ascend:${{ needs.build.outputs.VERSION }}-ubuntu
          push: true
          provenance: false
      - name: Build and publish ubuntu-ami container
        uses: docker/build-push-action@v4
        if: ${{ needs.build.outputs.NEEDS_RELEASE == 'true' }}
        with:
          file: ./containers/ubuntu-ami/Containerfile
          context: ./containers/ubuntu-ami
          platforms: linux/amd64,linux/arm64
          build-args: GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          tags: ghcr.io/alis-is/ascend:latest-ubuntu-ami,ghcr.io/alis-is/ascend:${{ needs.build.outputs.VERSION }}-ubuntu-ami
          push: true
          provenance: false

      # - name: Build and publish riscv64 container
      #   uses: docker/build-push-action@v4
      #   with:
      #     file: ./container/riscv64/Containerfile
      #     platforms: linux/riscv64
      #     build-args: GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
      #     tags: ghcr.io/tez-capital/riscv64/tezpay:latest,ghcr.io/tez-capital/riscv64/tezpay:${{github.ref_name}}
      #     push: true
      #     provenance: false